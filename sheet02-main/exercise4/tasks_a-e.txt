########################
# Solution to task (a) #
########################

g++ -std=c++20 -O0 -g program.cpp -o program
Explanation of the flags:

-std=c++20: Specifies the C++20 standard.
-O0: Disables all optimizations.
-g: Includes debug symbols.


########################
# Solution to task (b) #
########################
  
break main: Sets a breakpoint at the beginning of the main() function.
run: Initiates the program execution, and the execution stops at the breakpoint.
info breakpoints: Shows the breakpoints, indicating that there is a breakpoint at the beginning of the main() function.
info locals: Displays local variables in the main() function.
info threads: Lists the threads currently running.
info registers rip: Shows the current value of the instruction pointer register (rip on x86).

########################
# Solution to task (c) #
########################  

 ****(gdb) break foo
Breakpoint 1 at 0x1217: file program.cpp, line 6.
(gdb) 
Display all 196 possibilities? (y or n)
****(gdb) run
Starting program: /mnt/c/Users/10/CPP/sheet02/exercise4/program 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
Input first number: 1000
Input second number: 1000

****Breakpoint 1, (anonymous namespace)::foo (a=1000, b=1000) at program.cpp:6
warning: Source file is more recent than executable.
6           unsigned c = a ^ b;
****(gdb) info args
a = 1000
b = 1000
****(gdb) next
7           unsigned d = a & b;
****(gdb) advance 11
(anonymous namespace)::foo (a=1000, b=1000) at program.cpp:11
11              d = c & d;
****(gdb) print e
$1 = 2000
(gdb) finish
Run till exit from #0  (anonymous namespace)::foo (a=1000, b=1000) at program.cpp:11
(anonymous namespace)::bar (a=1000, b=2) at program.cpp:23
23              return foo(a, bar(a, b - 1));
Value returned is $2 = 2000



########################
# Solution to task (d) #
########################

(gdb) b main
Breakpoint 1 at 0x12a7: file program.cpp, line 28.
(gdb) run
Starting program: /mnt/c/Users/10/CPP/sheet02/exercise4/program 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main () at program.cpp:28
warning: Source file is more recent than executable.
28      int main() 
(gdb) call foo(12, 34)
$1 = 46
(gdb) call foo(15, 30)
$2 = 45
(gdb) call foo(50, 23)
$3 = 73
*****so the function calculates the two arguments
########################
# Solution to task (e) #
########################
for example we input the following arguments :
Input first number: 5
Input second number: -1

after running the program in gdb program: 
Program received signal SIGSEGV, Segmentation fault.
0x0000555555555285 in (anonymous namespace)::bar (a=5, b=4294705278) at program.cpp:23
warning: Source file is more recent than executable.
23              return foo(a, bar(a, b - 1));
(gdb) 
When we run the program with these inputs, 
it will likely crash, and the reason would be
 a stack overflow due to infinite recursion.
  The stack trace should indicate a series of 
  calls to the bar function with decreasing values
   of b, eventually reaching a negative value.